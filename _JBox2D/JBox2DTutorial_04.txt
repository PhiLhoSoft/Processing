JBox2D with BoxWrap2D Tutorial - Part 4 - Using joints
[url=http://processing.org/discourse/yabb2/YaBB.pl?num=1247034244]JBox2D with BoxWrap2D Tutorial[/url]

 - A - DistanceJoints

OK, for this lesson, I take the source from the third one, as it offers a bit of interactive tools to play with.
I just remove the random obstacles from InitScene, and rewrite CreateObjects. Actually, I will create a CreateXxxObject function per kind of joint, and replace the interaction kind selection by keyboard by a joint kind selection, which resets the world with a set of objects testing the various possibilities of the joints.
I also use a bigger world: 800x500 and defines globally the middle of the world (HW, HH).
In mouseReleased() I only apply an impulse.
As said, in keyPressed, I choose the demo:
[code]void keyPressed()
{
  // Reset the sketch
  physics.destroy();
  physics = null;
  InitScene();
  println(key);
  switch (key)
  {
  case 'd':
  case 'D': // Distance
    CreateDistanceObjects();
    break;
  case 'r':
  case 'R': // Revolution
    CreateRevoluteObjects();
    break;
  case 'p':
  case 'P': // Prismatic
    CreatePrismaticObjects();
    break;
  case 'g':
  case 'G': // Gear
    CreateGearObjects();
    break;
  case 'y':
  case 'Y': // Pulley
    CreatePulleyObjects();
    break;
  default: // Ignore...
  }
}
[/code]

It appears that testing the various parameters leads to quite long code, so I will split this lesson into several parts (one per joint), partly to make them more edible, partly to fit within forum limits...

Without futher ado, here it the code for the distance joints. I hope the abundant comments will help understanding how they work. Don't hesitate to tweak the values and see how they change the behavior.
[code]// A distance joint constrains two points on two bodies
// to remain at a fixed distance from each other. You can view
// this as a massless, rigid rod.
// -> That's what is said in the JBox2D source but the distance might vary,
// although there is a tendency to reach this defined distance.
void CreateDistanceObjects()
{
  // Set some fixed objects (handles)
  physics.setDensity(0.0);
  Body hl = physics.createCircle(70.0, 50.0, 10.0);
  Body hr = physics.createCircle(width - 70.0, 50.0, 10.0);

  int C_NB = 7;
  Body[] hc = new Body[C_NB];
  for (int i = 0; i < C_NB; i++)
  {
    hc[i] = physics.createCircle(170 + 75.0 * i, 50.0, 10.0);
  }

  // And some moving ones
  physics.setDensity(1.0);
  Body hangingL = physics.createRect(90.0, 150.0, 110.0, 200.0);
  Body hangingR = physics.createRect(width - 50.0, 150.0, width - 30.0, 200.0);

  Body[] hangC = new Body[C_NB];
  for (int i = 0; i < C_NB; i++)
  {
    hangC[i] = physics.createRect(190 + 75.0 * i, 150.0, 210 + 75.0 * i, 200.0);
  }

  // The "manual way", If you need to attach somewhere else than at the centers
  //  Create a distance (stick) joint between two bodies that holds the specified points at a constant distance
  // body1, body2, xa, ya, xb, yb
  Vec2 hlp = physics.worldToScreen(hl.getPosition());
  Vec2 hangingLp = physics.worldToScreen(hangingL.getPosition());
  physics.createDistanceJoint(hl, hangingL,
       hlp.x, hlp.y, hangingLp.x - 5.0, hangingLp.y - 20.0);

  // A simpler way, joining the centers of mass of the bodies
  // By default, it is stiff: frequency and damping ratio are zero
  JointUtils.createDistanceJoint(hr, hangingR);

  // Trying to do something more elastic
  DistanceJoint[] dj = new DistanceJoint[C_NB];
  for (int i = 0; i < C_NB; i++)
  {
    dj[i] = JointUtils.createDistanceJoint(hc[i], hangC[i]);
  }
  // A high frequence makes the hanging object to stabilize faster
  dj[0].setFrequency(0.2);
  // A low damping ration makes the amplitude of the movement bigger
  dj[0].setDampingRatio(0.1);

  // (No accessor) Gives some margin to extend
  dj[1].m_length *= 2.0;
  // Same parameters, for comparison
  dj[1].setFrequency(0.2);
  dj[1].setDampingRatio(0.1);

  // High frequency
  dj[2].m_length *= 2.0;
  dj[2].setFrequency(1.0);
  dj[2].setDampingRatio(0.1);

  // Stiffer
  dj[3].m_length *= 2.0;
  dj[3].setFrequency(0.2);
  dj[3].setDampingRatio(0.5);

  // Very high frequency with low damping:
  // It moves a lot but stops occillating quickly
  dj[4].m_length *= 2.0;
  dj[4].setFrequency(10.0);
  dj[4].setDampingRatio(0.01);

  // Smaller extent
  dj[5].m_length *= 0.7;
  // Same parameters, for comparison
  dj[5].setFrequency(0.2);
  dj[5].setDampingRatio(0.1);

  // With a very low frequency, it doesn't even have time to go up!
  dj[6].setFrequency(0.08);
  dj[6].setDampingRatio(0.1);

  // Tight joints. With no room to extend, I supposed it would make
  // a rigid body but the engine makes the shapes to overlap...
  Body tb1, tb2, tb3;
  tb1 = physics.createRect(20.0, 220.0, 100.0, 240.0);
  tb2 = physics.createRect(50.0, 240.0, 70.0, 320.0);
  tb3 = physics.createRect(70.0, 260.0, 150.0, 300.0);
  JointUtils.createDistanceJoint(tb1, tb2);
  JointUtils.createDistanceJoint(tb2, tb3);

  // Looser joints
  Body lb1, lb2;
  lb1 = physics.createRect(200.0, 300.0, 250.0, 350.0);
  lb2 = physics.createCircle(300.0, 350.0, 30.0);
  JointUtils.createDistanceJoint(lb1, lb2);

  // Even looser joints!
  Body elb1, elb2;
  elb1 = physics.createRect(width - 70.0, 300.0, width - 20.0, 350.0);
  elb2 = physics.createCircle(width - 120.0, 250.0, 30.0);
  DistanceJoint ldj = JointUtils.createDistanceJoint(elb1, elb2);
  ldj.setFrequency(0.2);
  ldj.setDampingRatio(0.1);
}
[/code]


[code][/code]
[code][/code]
